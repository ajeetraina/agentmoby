version: '3.8'

# MobyAgent: Secure AI Agent Reference Architecture
# This compose file implements a security-hardened deployment with:
# - Network isolation (public/dmz/internal networks)
# - Container hardening and rootless execution
# - MCP Gateway with security interceptors
# - Docker Model Runner for local LLM inference
# - Comprehensive monitoring with Wazuh
# - Supply chain security with signed images

networks:
  # Public network - only UI accessible from outside
  public:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/24
  
  # DMZ network - MCP Gateway isolation layer
  dmz:
    driver: bridge
    internal: true
    ipam:
      driver: default
      config:
        - subnet: 172.21.0.0/24
  
  # Internal network - Agent and LLM (no internet access)
  internal:
    driver: bridge
    internal: true
    ipam:
      driver: default
      config:
        - subnet: 172.22.0.0/24
  
  # Monitoring network - Security monitoring
  monitoring:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.23.0.0/24

volumes:
  # Persistent storage with proper permissions
  agent_data:
    driver: local
  llm_models:
    driver: local
  wazuh_data:
    driver: local
  interceptor_scripts:
    driver: local
  audit_logs:
    driver: local

services:
  # =================================================================
  # AGENT UI - Public Interface (Frontend)
  # =================================================================
  agent-ui:
    image: node:20-alpine
    container_name: mobyagent-ui
    restart: unless-stopped
    networks:
      - public
      - dmz
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=http://mcp-gateway:8080
      - NEXT_PUBLIC_APP_NAME=MobyAgent
    volumes:
      - ./ui:/app:ro
    working_dir: /app
    command: >
      sh -c "
        npm ci --only=production &&
        npm run build &&
        npm start
      "
    user: "1000:1000"  # Rootless execution
    read_only: true
    tmpfs:
      - /tmp
      - /app/.next
    cap_drop:
      - ALL
    security_opt:
      - no-new-privileges:true
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.2'
          memory: 256M

  # =================================================================
  # MCP GATEWAY - Security & Orchestration Layer
  # =================================================================
  mcp-gateway:
    image: docker/mcp-gateway:latest
    container_name: mobyagent-gateway
    restart: unless-stopped
    networks:
      - dmz
      - internal
      - monitoring
    ports:
      - "8080:8080"
    environment:
      - DOCKER_HOST=unix:///var/run/docker.sock
      - MCP_LOG_LEVEL=info
      - MCP_ENABLE_AUDIT=true
      - MCP_SECURITY_MODE=strict
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./interceptors:/scripts:ro
      - interceptor_scripts:/interceptor_state
      - audit_logs:/audit:rw
    command: >
      docker mcp gateway run
        --port=8080
        --transport=streaming
        --verify-signatures
        --block-network
        --block-secrets
        --cpus=1
        --memory=1Gb
        --log-calls
        --verbose
        --interceptor=before:exec:/scripts/prompt-injection-guard.py
        --interceptor=before:exec:/scripts/rate-limiter.sh
        --interceptor=before:exec:/scripts/auth-validator.py
        --interceptor=before:exec:/scripts/tool-access-control.py
        --interceptor=after:exec:/scripts/response-sanitizer.py
        --interceptor=after:exec:/scripts/audit-logger.py
        --interceptor=after:exec:/scripts/secret-scanner.py
        --interceptor=after:exec:/scripts/anomaly-detector.py
        --servers=filesystem,brave-search,github-official
    user: "1000:1000"
    read_only: true
    tmpfs:
      - /tmp
      - /var/log/mcp
    cap_drop:
      - ALL
    cap_add:
      - DAC_OVERRIDE  # Required for Docker socket access
    security_opt:
      - no-new-privileges:true
      - apparmor:docker-mcp-gateway
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M

  # =================================================================
  # AI AGENT - Core Logic with Mastra
  # =================================================================
  ai-agent:
    build:
      context: ./agent
      dockerfile: Dockerfile
      args:
        - USER_ID=1000
        - GROUP_ID=1000
    image: mobyagent/agent:latest
    container_name: mobyagent-core
    restart: unless-stopped
    networks:
      - internal
      - monitoring
    environment:
      - MCP_GATEWAY_URL=http://mcp-gateway:8080
      - LLM_URL=http://docker-model-runner:8000
      - AGENT_MODE=production
      - LOG_LEVEL=info
      - SYSTEM_PROMPT_FILE=/config/system_prompt.txt
      - MASTRA_CONFIG_FILE=/config/mastra.config.json
    volumes:
      - ./agent/config:/config:ro
      - agent_data:/data
      - audit_logs:/audit:rw
    user: "1000:1000"
    read_only: true
    tmpfs:
      - /tmp
      - /var/log/agent
    cap_drop:
      - ALL
    security_opt:
      - no-new-privileges:true
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '1.0'
          memory: 1G
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # =================================================================
  # DOCKER MODEL RUNNER - Local LLM Inference
  # =================================================================
  docker-model-runner:
    image: docker/model-runner:latest
    container_name: mobyagent-llm
    restart: unless-stopped
    networks:
      - internal
    environment:
      - MODEL_NAME=llama3.1:8b
      - MODEL_TEMPERATURE=0.1
      - MODEL_MAX_TOKENS=4096
      - ENABLE_SAFETY_FILTER=true
      - LOG_LEVEL=info
    volumes:
      - llm_models:/models
      - ./llm/config:/config:ro
    user: "1000:1000"
    read_only: true
    tmpfs:
      - /tmp
      - /var/log/llm
    cap_drop:
      - ALL
    security_opt:
      - no-new-privileges:true
    deploy:
      resources:
        limits:
          cpus: '4.0'
          memory: 8G
        reservations:
          cpus: '2.0'
          memory: 4G
      # GPU support if available
      # reservations:
      #   devices:
      #     - driver: nvidia
      #       count: 1
      #       capabilities: [gpu]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # =================================================================
  # WAZUH MANAGER - Security Monitoring
  # =================================================================
  wazuh-manager:
    image: wazuh/wazuh-manager:4.7.0
    container_name: mobyagent-security
    restart: unless-stopped
    networks:
      - monitoring
      - public
    ports:
      - "1514:1514/udp"  # Wazuh agent communication
      - "1515:1515"      # Wazuh enrollment service
      - "443:55000"      # Wazuh API (HTTPS)
    environment:
      - WAZUH_MANAGER_PORT=1514
      - API_GENERATE_CERTS=true
      - API_SSL_ENABLED=true
      - WAZUH_CLUSTER_DISABLED=true
    volumes:
      - wazuh_data:/var/ossec/data
      - ./wazuh/config:/var/ossec/etc:ro
      - audit_logs:/var/log/audit:ro
      - /var/log:/host/var/log:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    user: "1000:1000"
    cap_drop:
      - ALL
    cap_add:
      - DAC_READ_SEARCH
      - SETUID
      - SETGID
    security_opt:
      - no-new-privileges:true
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 1G

  # =================================================================
  # PROMETHEUS - Metrics Collection
  # =================================================================
  prometheus:
    image: prom/prometheus:latest
    container_name: mobyagent-metrics
    restart: unless-stopped
    networks:
      - monitoring
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=7d'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    user: "1000:1000"
    read_only: true
    tmpfs:
      - /prometheus
    cap_drop:
      - ALL
    security_opt:
      - no-new-privileges:true
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 1G
        reservations:
          cpus: '0.2'
          memory: 512M

  # =================================================================
  # GRAFANA - Monitoring Dashboard
  # =================================================================
  grafana:
    image: grafana/grafana:latest
    container_name: mobyagent-dashboard
    restart: unless-stopped
    networks:
      - monitoring
      - public
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=moby_secure_123!
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_DISABLE_GRAVATAR=true
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SECURITY_COOKIE_SECURE=true
      - GF_SERVER_PROTOCOL=https
      - GF_SERVER_CERT_FILE=/etc/grafana/grafana.crt
      - GF_SERVER_CERT_KEY=/etc/grafana/grafana.key
    volumes:
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
      - ./certs:/etc/grafana:ro
    user: "1000:1000"
    cap_drop:
      - ALL
    security_opt:
      - no-new-privileges:true
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.2'
          memory: 256M

  # =================================================================
  # TRIVY - Vulnerability Scanner
  # =================================================================
  trivy-scanner:
    image: aquasec/trivy:latest
    container_name: mobyagent-scanner
    restart: "no"  # Run on-demand
    networks:
      - monitoring
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./security/trivy-cache:/root/.cache/trivy
    command:
      - image
      - --format=json
      - --output=/tmp/trivy-report.json
      - mobyagent/agent:latest
    user: "1000:1000"
    cap_drop:
      - ALL
    security_opt:
      - no-new-privileges:true
    profiles:
      - security-scan  # Only run when security profile is activated

  # =================================================================
  # NGINX - Reverse Proxy & SSL Termination
  # =================================================================
  nginx:
    image: nginx:alpine
    container_name: mobyagent-proxy
    restart: unless-stopped
    networks:
      - public
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./certs:/etc/nginx/certs:ro
    user: "1000:1000"
    read_only: true
    tmpfs:
      - /var/cache/nginx
      - /var/run
    cap_drop:
      - ALL
    cap_add:
      - SETUID
      - SETGID
    security_opt:
      - no-new-privileges:true
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.1'
          memory: 128M
    depends_on:
      - agent-ui
      - mcp-gateway
      - grafana
