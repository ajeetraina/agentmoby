
services:
  # Sock Store Frontend
  front-end:
    image: weaveworksdemos/front-end:0.3.12
    hostname: front-end
    ports:
      - "9090:8079"
    restart: unless-stopped
    cap_drop:
      - all
    read_only: true
    networks:
      - app-network
    platform: linux/amd64

  # Catalogue Service
  catalogue:
    image: roberthouse224/catalogue:amd
    hostname: catalogue
    restart: unless-stopped
    cap_drop:
      - all
    cap_add:
      - NET_BIND_SERVICE
    read_only: true
    ports:
      - "8081:80"
    depends_on:
      - catalogue-db
    networks:
      - app-network
      - db-network
    platform: linux/amd64
    environment:
      # Override the database connection if needed
      - ZIPKIN_ENDPOINT=${ZIPKIN_ENDPOINT:-}

  # Catalogue Database - Fixed credentials to match what catalogue service expects
  catalogue-db:
    image: weaveworksdemos/catalogue-db:0.3.0
    hostname: catalogue-db
    restart: unless-stopped
    environment:
      # The catalogue service expects these specific credentials
      - MYSQL_ROOT_PASSWORD=fake_password  # Root password
      - MYSQL_DATABASE=socksdb             # Database name
      - MYSQL_USER=catalogue_user          # User that catalogue service uses
      - MYSQL_PASSWORD=default_password    # Password that catalogue service uses
    networks:
      - db-network
    volumes:
      - catalogue_db_data:/var/lib/mysql
    platform: linux/amd64

  # MongoDB for Customer Reviews
  mongodb:
    image: mongo:7-jammy
    hostname: mongodb
    ports:
      - "27017:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=password
      - MONGO_INITDB_DATABASE=sockstore
    volumes:
      - ./data/mongodb:/docker-entrypoint-initdb.d:ro
      - mongodb_data:/data/db
    networks:
      - db-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    command: [
      "mongod",
      "--quiet",
      "--logpath", "/var/log/mongodb/mongod.log",
      "--logappend"
    ]

  # MCP Gateway with Docker Socket Access
  mcp-gateway:
    image: docker/mcp-gateway:latest
    hostname: mcp-gateway
    ports:
      - "8811:8811"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:rw
    user: "0:0"
    command:
      - --transport=sse
      - --servers=fetch,brave,resend,curl,mongodb
      - --config=/mcp_config
      - --secrets=docker-desktop:/run/secrets/mcp_secret
      - --verbose
    configs:
      - mcp_config
    secrets:
      - mcp_secret
    depends_on:
      - mongodb
    networks:
      - app-network
      - db-network
    restart: unless-stopped
    environment:
      - DOCKER_HOST=unix:///var/run/docker.sock

  # ADK Core Service
  adk:
    build:
      context: .
      dockerfile: Dockerfile
    hostname: adk
    ports:
      - "8000:8000"
    environment:
      - MCPGATEWAY_ENDPOINT=http://mcp-gateway:8811/sse
      - CATALOGUE_URL=http://catalogue:80
      - OPENAI_BASE_URL=https://api.openai.com/v1
      - AI_DEFAULT_MODEL=openai/gpt-4
      - NODE_ENV=production
    depends_on:
      - mcp-gateway
      - catalogue
    secrets:
      - openai-api-key
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "wget --quiet --tries=1 --spider http://localhost:8000/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # ADK UI Service
  adk-ui:
    build:
      context: .
      dockerfile: Dockerfile.adk-ui
    hostname: adk-ui
    ports:
      - "3000:3000"
    environment:
      - API_BASE_URL=http://adk:8000
      - NODE_ENV=production
    depends_on:
      - adk
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "wget --quiet --tries=1 --spider http://localhost:3000/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

networks:
  app-network:
    driver: bridge
    name: agentmoby_app
  db-network:
    driver: bridge
    name: agentmoby_db

volumes:
  mongodb_data:
    name: agentmoby_mongodb_data
  catalogue_db_data:
    name: agentmoby_catalogue_db

configs:
  mcp_config:
    content: |
      mongodb:
        uri: mongodb://admin:password@mongodb:27017/sockstore?authSource=admin
      resend:
        reply_to: slimslenderslacks@gmail.com
        sender: slimslenderslacks@slimslenderslacks.com
      brave:
        endpoint: https://api.search.brave.com/res/v1/web/search

secrets:
  openai-api-key:
    file: ./secret.openai-api-key
  mcp_secret:
    file: ./.mcp.env
